# Домашнее задание к занятию "7.1. Инфраструктура как код"

### Задача 1. Выбор инструментов.
Легенда
Через час совещание на котором менеджер расскажет о новом проекте. Начать работу над которым надо будет уже сегодня. На данный момент известно, что это будет сервис, который ваша компания будет предоставлять внешним заказчикам. Первое время, скорее всего, будет один внешний клиент, со временем внешних клиентов станет больше.

Так же по разговорам в компании есть вероятность, что техническое задание еще не четкое, что приведет к большому количеству небольших релизов, тестирований интеграций, откатов, доработок, то есть скучно не будет.

Вам, как девопс инженеру, будет необходимо принять решение об инструментах для организации инфраструктуры. На данный момент в вашей компании уже используются следующие инструменты:
остатки Сloud Formation,
некоторые образы сделаны при помощи Packer,
год назад начали активно использовать Terraform,
разработчики привыкли использовать Docker,
уже есть большая база Kubernetes конфигураций,
для автоматизации процессов используется Teamcity,
также есть совсем немного Ansible скриптов,
и ряд bash скриптов для упрощения рутинных задач.
Для этого в рамках совещания надо будет выяснить подробности о проекте, что бы в итоге определиться с инструментами:

Какой тип инфраструктуры будем использовать для этого проекта: изменяемый или не изменяемый?

	На начальных этапах проекта, когда много релизов, доработок, больше подойдет изменяемуя инфраструктура. С развитием проекта можно перейти на неизменяемую.

Будет ли центральный сервер для управления инфраструктурой?

	Так как в компании начали активно использовать terraform год назад, а он не требует центрального сервера, то можно без центрального сервера, и использовать и  другие решения не требующие центрального сервера
	
Будут ли агенты на серверах?

	Так как в компании уже есть небольшой опыт со скриптами Ansible, то можно активней использовать Ansible, который не требует наличия агентов на серверах.

Будут ли использованы средства для управления конфигурацией или инициализации ресурсов?
	
	На ранних этапах проекта - применять средства управления конфигурацие, на поздних этапах применять инструменты инициализации ресурсов.

В связи с тем, что проект стартует уже сегодня, в рамках совещания надо будет определиться со всеми этими вопросами.

В результате задачи необходимо
Ответить на четыре вопроса представленных в разделе "Легенда".
Какие инструменты из уже используемых вы хотели бы использовать для нового проекта?

	GitHub (GitLab) - хранение исходного кода проекта и файлов конфигураций инфраструктуры 
	Ansible - ПО управления конфигурациями
	Packer - шаблонизация образов серверов
	Terraform -  инициация ресурсов в облачных вычислительных средах
	Teamcity - средство автоматического тестирования, сборки и доставки кода на серверы приложений
	Kubernetes - оркестрации приложений на основе контейнеров
	bash - автоматизация небольших частных задач

Хотите ли рассмотреть возможность внедрения новых инструментов для этого проекта?

	Для начала уже есть богатый набор инструментов, в текущем состоянии нет, возможно на поздних этапах.

Если для ответа на эти вопросы недостаточно информации, то напишите какие моменты уточните на совещании.

### Задача 2. Установка терраформ.
Официальный сайт: https://www.terraform.io/

Установите терраформ при помощи менеджера пакетов используемого в вашей операционной системе. В виде результата этой задачи приложите вывод команды terraform --version.

apt install unzip wget
wget https://releases.hashicorp.com/terraform/1.1.7/terraform_1.1.7_linux_amd64.zip
unzip terraform_*_linux_amd64.zip
sudo mv terraform /usr/local/bin/
terraform -version

![dz7_1_2-1](/dz_terraform_7_1/7_1_2-1.jpg)	

установка автоподстановок
terraform -install-autocomplete

### Задача 3. Поддержка легаси кода.
В какой-то момент вы обновили терраформ до новой версии, например с 0.12 до 0.13. А код одного из проектов настолько устарел, что не может работать с версией 0.13. В связи с этим необходимо сделать так, чтобы вы могли одновременно использовать последнюю версию терраформа установленную при помощи штатного менеджера пакетов и устаревшую версию 0.12.

В виде результата этой задачи приложите вывод --version двух версий терраформа доступных на вашем компьютере или виртуальной машине.

mkdir terraform_old
cd terraform_old/
wget https://releases.hashicorp.com/terraform/1.1.6/terraform_1.1.6_linux_amd64.zip
unzip terraform_1.1.6_linux_amd64.zip
создаем линк
sudo ln -s /home/bil/terraform_old/terraform /usr/local/bin/terraform_old

![dz7_1_3-1](/dz_terraform_7_1/7_1_3-1.jpg)	